//FileUploader component

import React, { Component } from 'react';
//import Dropzone from '../dropzone/dropzone.jsx';
import './file-uploader.css';
import Progress from '../progress-bar/progress-bar.jsx';

class FileUploader extends Component {
  constructor(props) {
    super(props);
    this.state = {
      files: [],
      uploading: false,
      uploadProgress: {},
      successfullUploaded: false
    };

    this.onFilesAdded = this.onFilesAdded.bind(this);
    this.uploadFiles = this.uploadFiles.bind(this);
    this.sendRequest = this.sendRequest.bind(this);
    this.renderActions = this.renderActions.bind(this);
  }

  onFilesAdded(files) {
    this.setState(prevState => ({
      files: prevState.files.concat(files)
    }));
  }

  renderProgress(file) {
    const uploadProgress = this.state.uploadProgress[file.name];
    let uploadState='';
    let imgOpacity = 0;
    
    if (uploadProgress) {
      uploadState = uploadProgress.state;
    }

    let statusLabel='';
    let imgSrc="baseline-check_circle_outline-24px.svg";
        
    if (this.state.uploading || this.state.successfullUploaded) {
    
      if (this.state.successfullUploaded) {
        if (uploadState === 'bad') {
          statusLabel='Unsupported file type';
          imgSrc="baseline-error_outline-24px.svg";
          imgOpacity=0.5;
        } else {
          imgOpacity=1;
        }
      }
      
      return (
        <div className="ProgressWrapper">
          <Progress progress={uploadProgress ? uploadProgress.percentage : 0} />
          <img
            className="CheckIcon"
            alt="done"
            src={imgSrc}
            style={{opacity: imgOpacity}}
          />
          <span>{statusLabel}</span>
        </div>
      );
    }
  }

  renderActions() {
    if (this.state.successfullUploaded) {
      return (
        <button
          onClick={() =>
            this.setState({ files: [], successfullUploaded: false })
          }
        >
          Clear
        </button>
      );
    } else {
      return (
        <button
          disabled={this.state.files.length < 0 || this.state.uploading}
          onClick={this.uploadFiles}
        >
          Upload
        </button>
      );
    }
  }

  async uploadFiles() {
    this.setState({ uploadProgress: {}, uploading: true });
    const promises = [];
    this.state.files.forEach(file => {
      promises.push(this.sendRequest(file));
    });
    try {
      //await Promise.all(promises);
      await Promise.all(promises);
      this.setState({ successfullUploaded: true, uploading: false });
    } catch (e) {
      // Not Production ready! Do some error handling here instead...
      this.setState({ successfullUploaded: false, uploading: false });
    }
  }

  sendRequest(file) {
    return new Promise((resolve, reject) => {
      const req = new XMLHttpRequest();
   
      req.upload.addEventListener("progress", event => {
        if (event.lengthComputable) {
          const copy = { ...this.state.uploadProgress };
          copy[file.name] = {
            state: "pending",
            percentage: (event.loaded / event.total) * 100
          };
          this.setState({ uploadProgress: copy });
        }
      });
      
      req.upload.addEventListener("load", event => {
        const copy = { ...this.state.uploadProgress };
        copy[file.name] = { state: "done", percentage: 100 };
        this.setState({ uploadProgress: copy });
        resolve(req.response);
      });
      
      req.upload.addEventListener("error", event => {
        const copy = { ...this.state.uploadProgress };
        copy[file.name] = { state: "error", percentage: 0 };
        this.setState({ uploadProgress: copy });
        reject(req.response);
      });
   
      let formData = new FormData();
      formData.append("uploadfile", file, file.name);
   
      req.onload = function(e) {
        const copy = { ...this.state.uploadProgress };
        if (req.readyState===4 && req.status===200) {
          copy[file.name] = { state: "done", percentage: 100 };
        } else if (req.readyState===4 && req.status===415) {
            copy[file.name] = { state: "bad", percentage: 0 };
        } else {
          copy[file.name] = { state: "error", percentage: 0 };
        }
        this.setState({ uploadProgress: copy });
      }.bind(this)
      

      req.open("POST", this.props.apiroot + '/file');
      req.send(formData);
    });
  }

  render() {
    return (
      <div className="Upload">
        <span className="Title">Upload Files</span>
        <div className="Content">
          <div>
            {/* <Dropzone
              onFilesAdded={this.onFilesAdded}
              disabled={this.state.uploading || this.state.successfullUploaded}
            /> */}
          </div>
        </div>
        <div className="Files">
          {this.state.files.map(file => {
            return (
              <div key={file.name} className="Row">
                <span className="Filename">{file.name}</span>
                {this.renderProgress(file)}
              </div>
            );
          })}
        </div>
        <div className="Actions">
          {this.renderActions()}
        </div>
      </div>
    );
  }
}

export default FileUploader;